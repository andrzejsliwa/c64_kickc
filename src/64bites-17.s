:BasicUpstart2(main)

.const SCREEN_MEMORY = $0400
.const COLOR_MEMORY  = $d800
.const FILLED_CHAR   = 160

* = $1000 "Main"
main:

  lda #FILLED_CHAR
.for(var char = 0; char < 1000; char++) {
  sta SCREEN_MEMORY + char
}


  ldy #0
  loopy:
    ldx #0
    loopx:
      sc_lda: lda image, x
      sc_sta: sta COLOR_MEMORY, x
      inx
      cpx #250
    bne loopx

    clc
    lda sc_lda + 1
    adc #250
    sta sc_lda + 1
    lda sc_lda + 2
    adc #0
    sta sc_lda + 2


    clc
    lda sc_sta + 1
    adc #250
    sta sc_sta + 1
    lda sc_sta + 2
    adc #0
    sta sc_sta + 2

    iny
    cpy #4
  bne loopy

end:
  jmp end

* = * "Data"
image:
  .byte 14,14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14,14
  .byte 14,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,14
  .byte 9,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,9
  .byte 9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,1,1,12,1,1,12,8,8,8,8,8,8,8,9,9,9
  .byte 9,9,9,8,8,8,8,8,1,1,12,12,12,12,12,12,1,1,12,8,8,8,8,1,1,12,8,1,1,12,8,8,8,8,8,8,8,9,9,9
  .byte 9,9,9,9,9,9,9,9,1,1,11,9,9,9,9,9,9,11,11,9,9,9,1,1,11,9,9,1,1,11,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,7,7,7,7,7,1,1,15,1,1,1,1,1,1,7,7,7,7,1,1,15,7,7,7,1,1,15,7,7,7,7,7,7,7,9,9,9
  .byte 9,9,9,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,7,7,1,1,15,7,7,7,7,1,1,15,7,7,7,7,7,7,7,9,9,9
  .byte 9,9,9,9,9,9,9,9,1,1,11,11,11,11,11,11,1,1,11,9,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,5,5,5,5,5,1,1,12,5,5,5,5,5,1,1,12,5,1,1,1,1,1,1,1,1,1,1,1,12,5,5,5,5,5,9,9,9
  .byte 9,9,9,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,12,5,5,12,12,12,12,12,12,1,1,12,12,12,5,5,5,5,5,9,9,9
  .byte 9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,1,1,11,11,9,9,9,9,9,9,9,9,1,1,11,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,6,6,6,6,6,6,6,6,6,6,12,12,6,6,6,6,6,6,6,9,9,9
  .byte 9,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9
  .byte 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,9,1,9,9,9,9,9,9,9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,9,1,9,1,1,1,9,9,9,1,9,9,1,1,1,1,1,9,9,9,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,9,9
  .byte 9,9,9,9,1,1,9,9,1,1,9,9,1,1,9,9,1,9,9,9,9,9,1,9,9,9,1,1,9,1,1,9,9,9,9,9,9,9,9,9
  .byte 9,9,9,9,1,9,9,9,9,1,9,9,1,1,9,9,1,9,9,9,9,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,9,9,9,9
  .byte 9,9,9,9,1,1,9,9,1,1,9,9,1,1,9,9,1,9,9,1,9,9,1,9,9,9,9,9,9,9,9,9,9,9,1,1,9,9,9,9
  .byte 9,9,9,9,1,9,1,1,1,9,9,9,1,1,9,9,1,1,1,1,9,9,9,1,1,1,1,9,9,9,1,1,1,1,1,9,9,9,9,9
  .byte 14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14
  .byte 14,14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14,14

.macro add_words_imm(a, b, result) {
    clc
  .for(var byte = 0; byte < 2; byte++) {
    lda a + byte
    adc #extract_byte(b, byte)
    sta result + byte
  }
}

.function extract_byte(value, byte_id) {
  .var bits = byte_id * 8
  .eval value = value >> bits
  .return value & 255
}
